// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProductVariants /> should render with variants 1`] = `
<_class
  currentBaseProductId={null}
  getProductData={[Function]}
  selection={null}
  setProductVariantId={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
  variants={
    Object {
      "characteristics": Array [
        Object {
          "id": "1",
          "label": "Color",
          "values": Array [
            Object {
              "id": "1",
              "label": "Black",
            },
            Object {
              "id": "2",
              "label": "Blue",
            },
          ],
        },
        Object {
          "id": "2",
          "label": "Size",
          "values": Array [
            Object {
              "id": "1",
              "label": "0",
            },
            Object {
              "id": "2",
              "label": "11",
            },
            Object {
              "id": "3",
              "label": "7",
            },
          ],
        },
      ],
      "products": Array [
        Object {
          "availability": Object {
            "state": "waning",
            "text": "Limited stock available",
          },
          "characteristics": Object {
            "1": "1",
            "2": "1",
          },
          "hasOptions": false,
          "id": "1013-1014",
        },
        Object {
          "availability": Object {
            "state": "alert",
            "text": "Out of stock",
          },
          "characteristics": Object {
            "1": "1",
            "2": "2",
          },
          "hasOptions": false,
          "id": "1013-1015",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "1",
            "2": "3",
          },
          "hasOptions": false,
          "id": "1013-1016",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "2",
            "2": "1",
          },
          "hasOptions": false,
          "id": "1013-1017",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "2",
            "2": "2",
          },
          "hasOptions": false,
          "id": "1013-1018",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "2",
            "2": "3",
          },
          "hasOptions": false,
          "id": "1013-1019",
        },
      ],
    }
  }
>
  <Mock
    currentBaseProductId={null}
    getProductData={[Function]}
    handleSelectionUpdate={[Function]}
    selection={
      Array [
        Object {
          "disabled": false,
          "id": "1",
          "label": "Color",
          "selected": false,
          "value": null,
          "values": Array [
            Object {
              "availability": null,
              "disabled": false,
              "id": "1",
              "label": "Black",
              "selected": false,
            },
            Object {
              "availability": null,
              "disabled": false,
              "id": "2",
              "label": "Blue",
              "selected": false,
            },
          ],
        },
        Object {
          "disabled": true,
          "id": "2",
          "label": "Size",
          "selected": false,
          "value": null,
          "values": Array [
            Object {
              "availability": null,
              "disabled": true,
              "id": "1",
              "label": "0",
              "selected": false,
            },
            Object {
              "availability": null,
              "disabled": true,
              "id": "2",
              "label": "11",
              "selected": false,
            },
            Object {
              "availability": null,
              "disabled": true,
              "id": "3",
              "label": "7",
              "selected": false,
            },
          ],
        },
      ]
    }
    setProductVariantId={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getAction": [Function],
        "getActions": [Function],
        "getState": [Function],
        "isActionDispatched": [Function],
        "isActionTypeDispatched": [Function],
        "subscribe": [Function],
      }
    }
    variants={null}
  >
    <div />
  </Mock>
</_class>
`;

exports[`<ProductVariants /> should update after selectionUpdate 1`] = `
<_class
  currentBaseProductId={null}
  getProductData={[Function]}
  selection={null}
  setProductVariantId={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
  variants={
    Object {
      "characteristics": Array [
        Object {
          "id": "1",
          "label": "Color",
          "values": Array [
            Object {
              "id": "1",
              "label": "Black",
            },
            Object {
              "id": "2",
              "label": "Blue",
            },
          ],
        },
        Object {
          "id": "2",
          "label": "Size",
          "values": Array [
            Object {
              "id": "1",
              "label": "0",
            },
            Object {
              "id": "2",
              "label": "11",
            },
            Object {
              "id": "3",
              "label": "7",
            },
          ],
        },
      ],
      "products": Array [
        Object {
          "availability": Object {
            "state": "waning",
            "text": "Limited stock available",
          },
          "characteristics": Object {
            "1": "1",
            "2": "1",
          },
          "hasOptions": false,
          "id": "1013-1014",
        },
        Object {
          "availability": Object {
            "state": "alert",
            "text": "Out of stock",
          },
          "characteristics": Object {
            "1": "1",
            "2": "2",
          },
          "hasOptions": false,
          "id": "1013-1015",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "1",
            "2": "3",
          },
          "hasOptions": false,
          "id": "1013-1016",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "2",
            "2": "1",
          },
          "hasOptions": false,
          "id": "1013-1017",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "2",
            "2": "2",
          },
          "hasOptions": false,
          "id": "1013-1018",
        },
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Available",
          },
          "characteristics": Object {
            "1": "2",
            "2": "3",
          },
          "hasOptions": false,
          "id": "1013-1019",
        },
      ],
    }
  }
>
  <Mock
    currentBaseProductId={null}
    getProductData={[Function]}
    handleSelectionUpdate={[Function]}
    selection={
      Array [
        Object {
          "disabled": false,
          "id": "1",
          "label": "Color",
          "selected": true,
          "value": "1",
          "values": Array [
            Object {
              "availability": null,
              "disabled": false,
              "id": "1",
              "label": "Black",
              "selected": true,
            },
            Object {
              "availability": null,
              "disabled": false,
              "id": "2",
              "label": "Blue",
              "selected": false,
            },
          ],
        },
        Object {
          "disabled": false,
          "id": "2",
          "label": "Size",
          "selected": false,
          "value": null,
          "values": Array [
            Object {
              "availability": Object {
                "state": "waning",
                "text": "Limited stock available",
              },
              "disabled": false,
              "id": "1",
              "label": "0",
              "selected": false,
            },
            Object {
              "availability": Object {
                "state": "alert",
                "text": "Out of stock",
              },
              "disabled": false,
              "id": "2",
              "label": "11",
              "selected": false,
            },
            Object {
              "availability": null,
              "disabled": false,
              "id": "3",
              "label": "7",
              "selected": false,
            },
          ],
        },
      ]
    }
    setProductVariantId={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getAction": [Function],
        "getActions": [Function],
        "getState": [Function],
        "isActionDispatched": [Function],
        "isActionTypeDispatched": [Function],
        "subscribe": [Function],
      }
    }
    variants={null}
  >
    <div />
  </Mock>
</_class>
`;

exports[`<ProductVariants /> shouldn't render without variants 1`] = `
<_class
  currentBaseProductId={null}
  getProductData={[Function]}
  selection={null}
  setProductVariantId={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
  variants={null}
>
  <Mock
    currentBaseProductId={null}
    getProductData={[Function]}
    handleSelectionUpdate={[Function]}
    selection={null}
    setProductVariantId={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getAction": [Function],
        "getActions": [Function],
        "getState": [Function],
        "isActionDispatched": [Function],
        "isActionTypeDispatched": [Function],
        "subscribe": [Function],
      }
    }
    variants={null}
  >
    <div />
  </Mock>
</_class>
`;
